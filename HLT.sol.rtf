// SPDX-License-Identifier: MIT\
pragma solidity ^0.8.0;\
\
interface ITRC20 \{\
    function totalSupply() external view returns (uint256);\
    function balanceOf(address account) external view returns (uint256);\
    function transfer(address recipient, uint256 amount) external returns (bool);\
    function allowance(address owner, address spender) external view returns (uint256);\
    function approve(address spender, uint256 amount) external returns (bool);\
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\
\
    event Transfer(address indexed from, address indexed to, uint256 value);\
    event Approval(address indexed owner, address indexed spender, uint256 value);\
\}\
\
contract HalykChainToken is ITRC20 \{\
    string public name = "Halyk Chain";\
    string public symbol = "HLT";\
    uint8 public decimals = 18; // 18 \'a7\'d9\'a7\'df\'a7\'d1\'a7\'dc\'a7\'e0\'a7\'d3 \'a7\'e1\'a7\'e0\'a7\'e3\'a7\'dd\'a7\'d6 \'a7\'d9\'a7\'d1\'a7\'e1\'a7\'f1\'a7\'e4\'a7\'e0\'a7\'db\
    uint256 private _totalSupply;\
    address public owner;\
\
    mapping(address => uint256) private _balances;\
    mapping(address => mapping(address => uint256)) private _allowances;\
    mapping(address => bool) private _frozenAccounts;\
\
    event Freeze(address indexed account);\
    event Unfreeze(address indexed account);\
\
    modifier onlyOwner() \{\
        require(msg.sender == owner, "Only owner can call this function");\
        _;\
    \}\
\
    modifier notFrozen(address account) \{\
        require(!_frozenAccounts[account], "Account is frozen");\
        _;\
    \}\
\
    constructor() \{\
        owner = msg.sender;\
        _totalSupply = 100_000_000_000 * 10 ** uint256(decimals); // 100 \'a7\'de\'a7\'da\'a7\'dd\'a7\'dd\'a7\'da\'a7\'d1\'a7\'e2\'a7\'d5\'a7\'e0\'a7\'d3 \'a7\'e4\'a7\'e0\'a7\'dc\'a7\'d6\'a7\'df\'a7\'e0\'a7\'d3\
        _balances[owner] = _totalSupply;\
        emit Transfer(address(0), owner, _totalSupply);\
    \}\
\
    function totalSupply() public view override returns (uint256) \{\
        return _totalSupply;\
    \}\
\
    function balanceOf(address account) public view override returns (uint256) \{\
        return _balances[account];\
    \}\
\
    function transfer(address recipient, uint256 amount) public override notFrozen(msg.sender) returns (bool) \{\
        require(recipient != address(0), "Transfer to the zero address");\
        require(_balances[msg.sender] >= amount, "Insufficient balance");\
\
        _balances[msg.sender] -= amount;\
        _balances[recipient] += amount;\
\
        emit Transfer(msg.sender, recipient, amount);\
        return true;\
    \}\
\
    function allowance(address owner, address spender) public view override returns (uint256) \{\
        return _allowances[owner][spender];\
    \}\
\
    function approve(address spender, uint256 amount) public override notFrozen(msg.sender) returns (bool) \{\
        require(spender != address(0), "Approve to the zero address");\
\
        _allowances[msg.sender][spender] = amount;\
        emit Approval(msg.sender, spender, amount);\
        return true;\
    \}\
\
    function transferFrom(address sender, address recipient, uint256 amount) public override notFrozen(sender) returns (bool) \{\
        require(sender != address(0), "Transfer from the zero address");\
        require(recipient != address(0), "Transfer to the zero address");\
        require(_balances[sender] >= amount, "Insufficient balance");\
        require(_allowances[sender][msg.sender] >= amount, "Allowance exceeded");\
\
        _balances[sender] -= amount;\
        _balances[recipient] += amount;\
        _allowances[sender][msg.sender] -= amount;\
\
        emit Transfer(sender, recipient, amount);\
        return true;\
    \}\
\
    function mint(uint256 amount) public onlyOwner \{\
        _totalSupply += amount;\
        _balances[owner] += amount;\
        emit Transfer(address(0), owner, amount);\
    \}\
\
    function burn(uint256 amount) public onlyOwner \{\
        require(_balances[owner] >= amount, "Insufficient balance to burn");\
\
        _totalSupply -= amount;\
        _balances[owner] -= amount;\
        emit Transfer(owner, address(0), amount);\
    \}\
\
    function freezeAccount(address account) public onlyOwner \{\
        require(!_frozenAccounts[account], "Account is already frozen");\
        _frozenAccounts[account] = true;\
        emit Freeze(account);\
    \}\
\
    function unfreezeAccount(address account) public onlyOwner \{\
        require(_frozenAccounts[account], "Account is not frozen");\
        _frozenAccounts[account] = false;\
        emit Unfreeze(account);\
    \}\
\}}
